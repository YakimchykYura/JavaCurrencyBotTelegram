package org.example;

import org.example.command.Buttons;
import org.example.command.NotificationSetting;
import org.glassfish.jersey.server.ManagedAsync;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import static org.example.command.Buttons.NumberSymbolsAfterCommaSetting.getButtonsOfParse;
public class TelegramCurrencyBot extends TelegramLongPollingBot {
    BotLogic botLogic = new BotLogic();

    private Message lastMessageCom, lastMessageBank, lastMessageCUR;

    public TelegramCurrencyBot(DefaultBotOptions options) {
        super(options);
    }

    @Override
    public String getBotToken() {
        return BotConstants.BOT_TOKEN;
    }

    @Override
    public String getBotUsername() {
        return BotConstants.BOT_NAME;
    }

    private void sendMessageAndKeyboard(String text, Long chatId, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setText(text);
        message.setChatId(chatId);
        if (keyboard != null) {
            message.setReplyMarkup(keyboard);
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendMessageNotification(String text, Long chatId, ReplyKeyboardMarkup replyMarkup) {
        SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(text);
                message.setReplyMarkup(replyMarkup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void editMessageAndKeyboard(Message message, InlineKeyboardMarkup keyboard) throws TelegramApiException {

        EditMessageText newMessage = new EditMessageText();
        newMessage.setChatId(message.getChatId());
        newMessage.setMessageId(message.getMessageId());
        newMessage.setText(message.getText());
        if (keyboard != null) {
            newMessage.setReplyMarkup(keyboard);
        }
        try {
            execute(newMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    public void commandStart(Update update) throws TelegramApiException {
        String infoAndSettings = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤—ñ–¥—Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç.\n" +
                "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å USD/UAH —É –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é'.\n" +
                "–î–ª—è —Ç–æ–≥–æ —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –±–∞–Ω–∫, –≤–∞–ª—é—Ç—É —Ç–∞ —ñ–Ω—à–µ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'.";
        Long chatId1 = update.getMessage().getChatId();
        sendMessageAndKeyboard(infoAndSettings, chatId1, Buttons.getButtonsInfoAndSettings());
    }
    public void commandSettings(CallbackQuery callbackQuery) throws TelegramApiException {
        Long chatId1 = callbackQuery.getMessage().getChatId();
        String callbackQueryData = callbackQuery.getData();

        if (callbackQueryData.equals("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")) {

            sendMessageAndKeyboard("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", chatId1, Buttons.getButtonsOfSettings());
        }
        if (callbackQueryData.equals("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é")) {

            sendMessageAndKeyboard(botLogic.getFinalMessage(), chatId1, Buttons.getButtonsInfoAndSettings());

        }
        if (callbackQueryData.equals("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏")) {

            SendMessage sendMessage = new SendMessage();
            sendMessage.setText("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏");
            sendMessage.setChatId(chatId1);
            sendMessage.setReplyMarkup(getButtonsOfParse(chatId1));
            lastMessageCom = execute(sendMessage);
        }

        if (Character.isDigit(callbackQueryData.charAt(0))) {

            botLogic.parseMenuButton(callbackQueryData);
            editMessageAndKeyboard(lastMessageCom,getButtonsOfParse(chatId1));
        }
        if (callbackQueryData.equals("–ë–∞–Ω–∫")) {

            SendMessage sendMessage = new SendMessage();
            sendMessage.setText("\uD83C\uDFE6"+"–ë–∞–Ω–∫");
            sendMessage.setChatId(chatId1);
            sendMessage.setReplyMarkup(Buttons.Num.getButtonsBank(chatId1));
            lastMessageBank= execute(sendMessage);
        }
        switch (callbackQueryData){
        case "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫","–ú–æ–Ω–æ–ë–∞–Ω–∫","–ù–ë–£":
            botLogic.bankMenuButton(callbackQueryData);
            editMessageAndKeyboard(lastMessageBank, Buttons.Num.getButtonsBank(chatId1));
            break;
        }
        if(callbackQueryData.equals("–í–∞–ª—é—Ç–∞")){
            SendMessage sendMessage = new SendMessage();
            sendMessage.setText("–í–∞–ª—é—Ç–∞");
            sendMessage.setChatId(chatId1);
            sendMessage.setReplyMarkup(Buttons.getButtonsCurr(chatId1));
            lastMessageCUR= execute(sendMessage);

        }
        switch (callbackQueryData){
            case "EUR","USD":
                botLogic.Curracy(callbackQueryData);
                editMessageAndKeyboard(lastMessageCUR, Buttons.getButtonsCurr(chatId1));
                break;
        }
         if (callbackQueryData.equals("–Ω–∞–∑–∞–¥")){
             sendMessageAndKeyboard("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",chatId1,Buttons.getButtonsOfSettings());
        }
          if (callbackQueryData.equals("–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å")){
              SendMessage sendMessage = new SendMessage();
              sendMessage.setText("–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
              sendMessage.setChatId(chatId1);
              sendMessage.setReplyMarkup(NotificationSetting.getNotificationButtons(chatId1));
              execute(sendMessage);
          }
        if (callbackQueryData.equals("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")){

            sendMessageAndKeyboard("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",chatId1,Buttons.getButtonsInfoAndSettings());
        }
    }
    private void handleMessage(Message message) throws TelegramApiException {
        String text = message.getText();
        Long chatId = message.getChatId();
        String chatID = message.getChatId().toString();

        switch (text) {
            case "üè†"+ "–î–æ–¥–æ–º—É":
                sendMessageAndKeyboard("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", chatId, Buttons.getButtonsInfoAndSettings());
                break;
            case "9":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.NINE);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  9 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "10":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.TEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  10 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "11":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.ELEVEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  11 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "12":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.TWELVE);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  12 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "13":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.THIRTEEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  13 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "14":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.FOURTEEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  14 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "15":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.FIFTEEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  15 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "16":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.SIXTEEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  16 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "17":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.SEVENTEEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  17 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "18":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.EIGHTEEN);
                sendMessageNotification("–ù–∞–¥—ñ—à–ª–µ–º–æ –í–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ  18 –≥–æ–¥–∏–Ω—ñ.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;

            case "–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
                NotificationSetting.setNotification(message.getChatId(), NotificationSetting.Notification.OFF_NOTIFY);
                sendMessageNotification("–í–∏ –≤–∏–º–∫–Ω—É–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", chatId, NotificationSetting.getNotificationButtons(chatId));
                break;
        }
    }
    public void sendNotification(long chatId) throws TelegramApiException {

        execute(SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(BotLogic.getFinalMessage())
                .replyMarkup(Buttons.getButtonsInfoAndSettings())
                .build());
    }
    @Override
    public void onUpdateReceived(Update update) {

        if (update.hasMessage() && update.getMessage().isCommand()) {
            try {
                commandStart(update);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else if (update.hasCallbackQuery()) {

            try {
              commandSettings(update.getCallbackQuery());
           } catch (TelegramApiException e) {
               throw new RuntimeException(e);
          }
        } else if (update.hasMessage() && update.getMessage().hasText()) {

            try {
                handleMessage(update.getMessage());
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }
}