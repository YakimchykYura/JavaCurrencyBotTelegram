package org.example.command;

import org.example.BotLogic;
import org.example.Currency;
import org.example.bank.Bank;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

import static org.example.BotLogic.chosenCurrency;
import static org.example.bank.Bank.*;
import static org.example.command.BankSetting.getSavedBank;

public class Buttons {
    public static InlineKeyboardMarkup getButtonsInfoAndSettings(){
        InlineKeyboardButton buttonInfo = InlineKeyboardButton
                .builder()
                .text("‚úâÔ∏è"+"–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é")
                .callbackData("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é")
                .build();
        InlineKeyboardButton buttonSettings = InlineKeyboardButton
                .builder()
                .text("‚öôÔ∏è" + "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
                .callbackData("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
                .build();
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup
                .builder()
                .keyboard(Collections.singleton(Collections.singletonList(buttonInfo)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonSettings)))
                .build();
        return keyboard;
    }
    public static InlineKeyboardMarkup getButtonsOfSettings(){
        InlineKeyboardButton buttonNum = InlineKeyboardButton
                .builder()
                .text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏")
                .callbackData("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏")
                .build();
        InlineKeyboardButton buttonBank = InlineKeyboardButton
                .builder()
                .text("\uD83C\uDFE6" + "–ë–∞–Ω–∫")
                .callbackData("–ë–∞–Ω–∫")
                .build();
        InlineKeyboardButton buttonCurrency = InlineKeyboardButton
                .builder()
                .text("üíµ" + "–í–∞–ª—é—Ç–∞")
                .callbackData("–í–∞–ª—é—Ç–∞")
                .build();
        InlineKeyboardButton buttonTime = InlineKeyboardButton
                .builder()
                .text("üïê" + "–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å")
                .callbackData("–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å")
                .build();
        InlineKeyboardButton buttonBackMainMenu = InlineKeyboardButton
                .builder()
                .text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
                .callbackData("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
                .build();
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup
                .builder()
                .keyboard(Collections.singleton(Collections.singletonList(buttonNum)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonBank)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonCurrency)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonTime)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonBackMainMenu)))
                .build();
        return keyboard;

    }
     public static class NumberSymbolsAfterCommaSetting {
     static BotLogic botLogic=new BotLogic();

     static String setButton2Name() {
        return  (String.valueOf(botLogic.parseChose).equals("2")) ? "2" + " ‚úÖ" : "2" ;
    }

     static   String setButton3Name() {
        return  (String.valueOf(botLogic.parseChose).equals("3")) ? "3" + " ‚úÖ" : "3" ;
    }

     static   String setButton4Name() {
        return  (String.valueOf(botLogic.parseChose).equals("4")) ? "4" + " ‚úÖ" : "4" ;
    }
     public  static   InlineKeyboardMarkup getButtonsOfParse(Long chatId){


     InlineKeyboardButton button2 = InlineKeyboardButton
             .builder()
             .text(setButton2Name())
             .callbackData("2")
             .build();
     InlineKeyboardButton button3 = InlineKeyboardButton
             .builder()
             .text(setButton3Name())
             .callbackData("3")
             .build();
     InlineKeyboardButton button4 = InlineKeyboardButton
             .builder()
             .text(setButton4Name())
             .callbackData("4")
             .build();
     InlineKeyboardButton buttonBack = InlineKeyboardButton
             .builder()
             .text("üîô" + "–ù–∞–∑–∞–¥")
             .callbackData("–Ω–∞–∑–∞–¥")
             .build();
     InlineKeyboardMarkup keyboard = InlineKeyboardMarkup
             .builder()
             .keyboard(Collections.singleton(Collections.singletonList(button2)))
             .keyboard(Collections.singleton(Collections.singletonList(button3)))
             .keyboard(Collections.singleton(Collections.singletonList(button4)))
             .keyboard(Collections.singleton(Collections.singletonList(buttonBack)))
             .build();
     return keyboard;
 }
     }
    public static class Num{
        static String setButton2Name() {
            return  (String.valueOf(BotLogic.bankChoice).equals("–ù–ë–£")) ? "–ù–ë–£" + " ‚úÖ" : "–ù–ë–£" ;
        }
        static   String setButton3Name() {
            return  (String.valueOf(BotLogic.bankChoice).equals("–ú–æ–Ω–æ–±–∞–Ω–∫")) ? "–ú–æ–Ω–æ–ë–∞–Ω–∫" + " ‚úÖ" : "–ú–æ–Ω–æ–ë–∞–Ω–∫" ;
        }
        static   String setButton4Name() {
            return  (String.valueOf(BotLogic.bankChoice).equals("–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫")) ? "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫" + " ‚úÖ" : "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫" ;
        }
    public static InlineKeyboardMarkup getButtonsBank(Long chatId){
        InlineKeyboardButton button2 = InlineKeyboardButton
                .builder()
                .text(setButton2Name())
                .callbackData("–ù–ë–£")
                .build();
        InlineKeyboardButton button3 = InlineKeyboardButton
                .builder()
                .text(setButton3Name())
                .callbackData("–ú–æ–Ω–æ–ë–∞–Ω–∫")
                .build();
        InlineKeyboardButton button4 = InlineKeyboardButton
                .builder()
                .text(setButton4Name())
                .callbackData("–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫")
                .build();
        InlineKeyboardButton buttonBack = InlineKeyboardButton
                .builder()
                .text("üîô" + "–ù–∞–∑–∞–¥")
                .callbackData("–Ω–∞–∑–∞–¥")
                .build();
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup
                .builder()
                .keyboard(Collections.singleton(Collections.singletonList(button2)))
                .keyboard(Collections.singleton(Collections.singletonList(button3)))
                .keyboard(Collections.singleton(Collections.singletonList(button4)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonBack)))
                .build();
        return keyboard;
       }
    }
    public static InlineKeyboardMarkup getButtonsCurr(Long chatId){
        InlineKeyboardButton button2 = InlineKeyboardButton
                .builder()
                .text((chosenCurrency.contains(Currency.USD)) ? "\uD83C\uDDFA\uD83C\uDDF8" + "USD" + " ‚úÖ" : "\uD83C\uDDFA\uD83C\uDDF8" + "USD")
                .callbackData("USD")
                .build();
        InlineKeyboardButton button3 = InlineKeyboardButton
                .builder()
                .text((chosenCurrency.contains(Currency.EUR)) ? "üá™üá∫" + "EUR" + " ‚úÖ" : "üá™üá∫" + "EUR")
                .callbackData("EUR")
                .build();

        InlineKeyboardButton buttonBack = InlineKeyboardButton
                .builder()
                .text("üîô" + "–ù–∞–∑–∞–¥")
                .callbackData("–Ω–∞–∑–∞–¥")
                .build();

        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup
                .builder()
                .keyboard(Collections.singleton(Collections.singletonList(button2)))
                .keyboard(Collections.singleton(Collections.singletonList(button3)))
                .keyboard(Collections.singleton(Collections.singletonList(buttonBack)))
                .build();
        return keyboard;
    }
}